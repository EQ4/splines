{"name":"Splines","tagline":"Spline classes for SuperCollider","body":"Splines\r\n=======\r\n\r\nSplines for the [SuperCollider](http://github.com/supercollider/supercollider) music programming environment.\r\n\r\n* BezierSpline\r\n    - BezierSplines may have an unlimited number of control points.\r\n* LinearSpline\r\n* BSpline\r\n\r\nThese are representations of the mathematical defintion of splines (a collection of Points) with supporting functions for performing the interpolations.  Unlike Envelopes they are not limited to left-to-right time representations.\r\n\r\nUses\r\n----\r\n\r\nSplines can be used as controllers for parameter automation or sequencing. They may be multi-dimensional and be used to control many parameters with a unified time domain.  States and presets can be stored in multi-dimensional points and interpolated between or sequenced in time.\r\n\r\n\r\n* SplineGen \r\n    - kr     - like EnvGen but for Splines\r\n    - ar     - also possible to loop it and run it at audio frequencies\r\n    - readKr - use a position input to freely modulate along the X axis\r\n    - xyKr   - travels along the spine and emits modulation controls for each dimension\r\n\r\n* SplineMapper - use a spline as a transfer function or waveshaper. kr/ar\r\n    \r\n* SplineOsc - play a spline as an oscillator. kr/ar\r\n\r\nMx also includes SplineFr that plays a Spline at a frame rate on the client and sends controls to the server.  This class might be moved into splines.\r\n\r\n\r\nGUI\r\n---\r\n\r\nSpline GUIs may be placed on any window or view and even on another UserView. They can be zoomed in the X dimension for time-domain splines (for instance automation curves).\r\n\r\nDouble click to create a new point. Click a point to select it, hit delete to delete it.  \r\n\r\nHold down shift-control while moving a point to limit movements to the vertical axis.  Hold down control to limit it to the horizontal.\r\n\r\nBezier Splines have control points — hold down ALT while clicking to create or edit those.\r\n\r\n\tl = LinearSpline({ { 4.0.rand } ! 2 } ! 9);\r\n\tl.gui\r\n\r\n\r\n\tl = LinearSpline({ { 4.0.rand } ! 6 } ! 12);\r\n\tv = VectorSplineGui(l).gui(nil,1000@1000);\r\n\r\n\r\n    // used like a long envelope\r\n    b = LinearSpline( Array.fill(60,{ arg i; [ i,1.0.rand ] }) );\r\n    b.gui(nil,1200@300);\r\n    {\r\n    \tPinkNoise.ar * SplineGen(b).kr(doneAction:2)\r\n    }.play\r\n    \r\n    // travel along the spine of the spline outputting an x and a y control\r\n    {\r\n\t    # f , w = SplineGen(b,0,loop:true).xyKr(MouseY.kr(0.1,20),32);\r\n\t    Pulse.ar(f.clip(40,500),w.clip(0.0,1.0),0.4).dup\r\n    }.play\r\n    \r\n* VectorSplineGui - for editing multi-dimensional splines that consist of a series of vectors — each point is a vector of parameters.  It interperets a spline as an ordered series of vectors.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}